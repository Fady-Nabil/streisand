---
- hosts: localhost
  vars:
    wireguard_server_private_key_file: "oI4UcaoyJtGPKQqDkev6obO6iaNCxOw8HyoxHq00eGw="  
    wireguard_server_public_key_file:  "fdvqFBirOXDbh7ryXlzRVWgDL7uGvwycUbrmGe+baDs=" 
  tasks:
  # - name: Generate private and public key for the server
  #   shell: "umask 077; wg genkey | tee {{ wireguard_server_private_key_file }} | wg pubkey > {{ wireguard_server_public_key_file }}"
  #   args:
  #     creates: "{{ wireguard_server_public_key_file }}"

  # - name: Register the server key file contents
  #   command: cat {{ item }}
  #   register: wireguard_server_key_files
  #   changed_when: False
  #   with_items:
  #     - "{{ wireguard_server_private_key_file }}"
  #     - "{{ wireguard_server_public_key_file }}"

  - name: Create a directory for each client
    file:
      path: "/etc/wireguard/clients/{{ clientName }}"
      state: directory
      owner: root
      group: root
      mode: 0600

  # - name: Set the server key material facts
  #   set_fact:
  #     wireguard_server_private_key: "{{ wireguard_server_key_files.results[0].stdout }}"
  #     wireguard_server_public_key:  "{{ wireguard_server_key_files.results[1].stdout }}"


  - name: Generate private and public key for each client
    shell: "umask 077; wg genkey | tee client.key | wg pubkey > client.pub"
    args:
      chdir: "/etc/wireguard/clients/{{ clientName }}"
      creates: client.key
   

  - name: Register client public keys
    command: cat client.pub
    args:
      chdir: "/etc/wireguard/clients/{{ clientName }}"
   
    register: wireguard_client_pubkeys
    changed_when: False
   
  - debug:
      msg: "{{ wireguard_client_pubkeys.stdout }}" 

  - name: Register client private keys
    command: cat client.key
    args:
      chdir: "/etc/wireguard/clients/{{ clientName }}"
    
    register: wireguard_client_privkeys
    changed_when: False

  - name: Generate the client configuration profiles
    template:
      src: client.conf.j2
      dest: "/etc/wireguard/clients/{{ clientName }}/client.conf"
    # with_together:
    # - "{{ vpn_client_names.results }}"
    # - "{{ wireguard_client_privkeys.results }}"
  

  - name: Generate OpenWrt configuration fragments
    template:
      src: client-openwrt.txt.j2
      dest: "/etc/wireguard/clients/{{ clientName }}/client-openwrt.txt"
    # with_together:
    # - "{{ vpn_client_names.results }}"
    # - "{{ wireguard_client_privkeys.results }}"
    

  - name: Generate the server configuration
    template:
      src: "server.conf.j2"
      dest: "/etc/wireguard/clients/wg0.conf"
      owner: root
      group: root
      mode: 0600

  - name: Enable reload-module-on-update to upgrade WireGuard without user confirmation
    file:
      path: "/etc/wireguard/clients/.reload-module-on-update"
      state: touch

  # # Set up the WireGuard firewall rules
  # - import_tasks: firewall.yml

  - name: Enable the WireGuard service so it starts at boot, and bring up the WireGuard network interface
    systemd:
      name: wg-quick@wg0.service
      enabled: yes
      state: started
    # Temporary workaround for issue #500
    ignore_errors: yes

# - import_tasks: docs.yml
